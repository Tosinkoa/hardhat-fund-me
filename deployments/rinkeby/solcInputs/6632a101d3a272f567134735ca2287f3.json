{
  "language": "Solidity",
  "sources": {
    "contracts/PaulFundMe.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\n//Pragma\npragma solidity ^0.8.0;\n//Imports\nimport \"./PaulPriceConverter.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nerror PaulFundMe__NotOwner();\nerror PaulFundMe__CallFailed();\n\ncontract PaulFundMe {\n    //Type Declarations\n    using PaulPriceConverter for uint256;\n    // State Variables\n    uint256 public MINIMUM_USD = 50 * 1e18;\n    address[] public funders;\n    mapping(address => uint256) public mapAddressToAmountFunded;\n    address public immutable i_owner;\n    AggregatorV3Interface public priceFeed;\n\n    //Modifiers\n    modifier onlyi_Owner() {\n        if (msg.sender != i_owner) {\n            revert PaulFundMe__NotOwner();\n        }\n        _;\n    }\n\n    // Functions Order:\n    //// constructor\n    //// receive\n    //// fallback\n    //// external\n    //// public\n    //// internal\n    //// private\n    //// view / pure\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    function fund() public payable {\n        require(\n            msg.value.getConversion(priceFeed) >= MINIMUM_USD,\n            \"Didn't send enough\"\n        );\n        funders.push(msg.sender);\n        mapAddressToAmountFunded[msg.sender] += msg.value;\n    }\n\n    function Withdraw() public onlyi_Owner {\n        for (uint256 funderIndex; funderIndex < funders.length; funderIndex++) {\n            address funder = funders[funderIndex];\n            mapAddressToAmountFunded[funder] = 0;\n        }\n        //-------------Reseting the array----------------\n        funders = new address[](0);\n\n        //----------------Withdrawing funds------------------\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        if (!callSuccess) {\n            revert PaulFundMe__CallFailed();\n        }\n    }\n}\n"
    },
    "contracts/PaulPriceConverter.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PaulPriceConverter {\r\n    function getPrice(AggregatorV3Interface priceFeed)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        (, int256 price, , , ) = priceFeed.latestRoundData();\r\n        return uint256(price * 1e10);\r\n    }\r\n\r\n    function getConversion(uint256 ethAmount, AggregatorV3Interface priceFeed)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        return (ethPrice * ethAmount) / 1e18;\r\n    }\r\n}\r\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}